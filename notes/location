Location of bash(1) function libraries

Shell function libraries are used through the source(1) command, which looks up
arguments not containing a slash on the PATH, unless the sourcepath option is
turned off, but otherwise uses the supplied argument verbatim.

Placing shell function libraries on the PATH makes them available to source(1)
without interfering with bash(1) command lookup, provided they are not marked
executable; in theory, however, this might catch by surprise any tools written
under the assumption that all files under e.g. /usr/bin are executable. A very
unscientific test on a random Fedora 30 install found a single non-executable
file out ot 2000+, although it was indeed a shell function library from the
MariaDB system package.

Candidate PATH directories for function libraries include:
  ~/.local/bin
  ~/bin
  /opt/<package>/bin
  /usr/local/bin
  /usr/bin
  /bin

The ~/.local/bin option seems a (widely agreed upon) addition to the XDG Base
Directory Specification.

The ~/bin option is firmly established in Unix and Linux tradition.

The /opt/<package>/bin option is specified in the FHS 3.0.

The /usr/local/bin (originally a GNU convention), /usr/bin and /bin options
are specified in the FHS 3.0.

Using traditional package manager such as RPM, system originated shell function
libraries would be installed in /bin (if essential) or /usr/bin.

Only the local system administrator is expected to install ot /usr/local/bin.

Third party originated shell function libraries belong under /opt, either
under /opt/<package> or under /opt/<vendor> ... the difference being that
<vendor> is supposedly registered with LANANA. This is also where Red Hat
Software Collections end up.

Individual users (accounts) customarily install software under ~/bin, but it
is unclear why in some instances ~/.local/bin comes before ~/bin in the PATH.
